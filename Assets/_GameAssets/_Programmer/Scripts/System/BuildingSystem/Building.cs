//----------------------------------------------------------------------
// Author   : "Ananta Miyoru Wijaya"
//----------------------------------------------------------------------

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using MyCampusStory.StandaloneManager;
using MyCampusStory.DataPersistenceSystem;
using MyCampusStory.ResourceSystem;

namespace MyCampusStory.BuildingSystem
{
    public class Building : MonoBehaviour, IDataPersistence, IInteractable
    {
        [System.Serializable]
        public struct BuildingData
        {
            [Tooltip("The base id of the building.")]
            public string BuildingBaseId;
            public string BuildingName;
            
            [TextArea]
            public string BuildingDescription;
        }


        [SerializeField] private BuildingData _buildingData;

        [Tooltip("The instance id of the building.")]
        [SerializeField] private string _buildingInstanceId;
        [SerializeField] private int _maxBuildingLevel;

        [Tooltip("The stats of the building for each level.")]
        [SerializeField] private BuildingStat[] _buildingStatsPerLevel;

        private LevelManager _levelManager;
        private bool _isBuildingUnlocked = false;
        private int _currentBuildingLevel = 1;
        private BuildingStat _currentBuildingStat;
        private Dictionary<int, BuildingStat> _buildingStatsPerLevelDictionary;
        private BuildingUpgradeManager _buildingUpgradeManager;
        private Coroutine GenerateResourceCoroutine;

        private void Awake()
        {
            _levelManager = LevelManager.Instance;

            _buildingUpgradeManager = new BuildingUpgradeManager();

            //Initialize building stats dictionary
            foreach (var buildingStat in _buildingStatsPerLevel)
            {
                _buildingStatsPerLevelDictionary.Add(buildingStat.BuildingLevel, buildingStat);
            }

            _currentBuildingStat = _buildingStatsPerLevelDictionary[_currentBuildingLevel];
        }

        private void Start()
        {
            GenerateResourceCoroutine = StartCoroutine(GenerateResource());
        }


        public void UpgradeBuilding()
        {
            if(_currentBuildingLevel >= _maxBuildingLevel)
            {
                Debug.Log("Max level reached");
                return;
            }

            if(!_buildingUpgradeManager.TryUpgradingBuilding(_buildingStatsPerLevelDictionary, _currentBuildingStat, _currentBuildingLevel, LevelManager.Instance.ResourceManager))
            {
                Debug.Log("Not enough resources to upgrade");
                return;
            }

            _currentBuildingLevel++;
        }

        public void SaveData(GameData data)
        {
            if(data.PlayerBuildingData.ContainsKey(_buildingInstanceId))
            {
                data.PlayerBuildingData[_buildingInstanceId].IsBuildingUnlocked = _isBuildingUnlocked;
                data.PlayerBuildingData[_buildingInstanceId].CurrentBuildingLevel = _currentBuildingLevel;
            }
            else
            {
                data.PlayerBuildingData.Add(_buildingInstanceId, new SerializedBuildingData
                {
                    IsBuildingUnlocked = _isBuildingUnlocked,
                    CurrentBuildingLevel = _currentBuildingLevel
                });
            }
        }

        public void LoadData(GameData data)
        {
            if(data.PlayerBuildingData.ContainsKey(_buildingInstanceId))
            {
                _isBuildingUnlocked = data.PlayerBuildingData[_buildingInstanceId].IsBuildingUnlocked;
                _currentBuildingLevel = data.PlayerBuildingData[_buildingInstanceId].CurrentBuildingLevel;
            }
        }

        public void Interact()
        {
            
        }

        private IEnumerator GenerateResource()
        {
            yield return new WaitForSecondsRealtime(_currentBuildingStat.ResourceGenerationStats[0].ResourceGenerationIntervalInSecondsRealTime);

            _levelManager.ResourceManager.ModifyResourceAmount(_currentBuildingStat.ResourceGenerationStats[0].ResourceToGenerate.ResourceId, 
                _currentBuildingStat.ResourceGenerationStats[0].GeneratedResourceAmount);
        }

        [ContextMenu("Generate Building Ref Id")]
        private void GenerateBuildingRefId()
        {
            _buildingInstanceId = _buildingData.BuildingBaseId + "_" + System.Guid.NewGuid().ToString();
        }

    }

    [System.Serializable]
    public struct BuildingStat
    {
        public int BuildingLevel;
        
        [Tooltip("The resources required for upgrading the building to next level.")]
        public BuildingUpgradeRequirement[] BuildingUpgradeRequirements;

        [Tooltip("The resources generated by the building.")]
        public ResourceGenerationStat[] ResourceGenerationStats;
        

        [System.Serializable]
        public struct BuildingUpgradeRequirement
        {
            public ResourceSO RequiredResource;
            public int RequiredResourceAmount;
        }

        [System.Serializable]
        public struct ResourceGenerationStat
        {
            public ResourceSO ResourceToGenerate;
            public int GeneratedResourceAmount;
            public float ResourceGenerationIntervalInSecondsRealTime;
        }
    }
    
}
